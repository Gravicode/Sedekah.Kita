@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@inject IJSRuntime jsRuntime
@namespace SedekahKita.Web.Pages.Master
@using SedekahKita.Web.Helpers
@using System.IO
<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="nama">Nama</label>
                        <input type="hidden" @bind-value="@TaskObject.Id" />
                        <InputText id="nama" class="form-control" @bind-Value="@TaskObject.Nama" />
                        <ValidationMessage For="@(() => TaskObject.Nama)" />
                    </div>
                    <div class="form-group">
                        <label for="alamat">Alamat</label>
                        <InputTextArea id="alamat" class="form-control" @bind-Value="@TaskObject.Alamat" />
                        <ValidationMessage For="@(() => TaskObject.Alamat)" />
                    </div>
                    <div class="form-group">
                        <label for="phone">No HP</label>
                        <InputText id="phone" class="form-control" @bind-Value="@TaskObject.Phone" />
                        <ValidationMessage For="@(() => TaskObject.Phone)" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="@TaskObject.Email" />
                        <ValidationMessage For="@(() => TaskObject.Email)" />
                    </div>
                    <div class="form-group">
                        <label for="keterangan">Keterangan</label>
                        <InputTextArea id="keterangan" class="form-control" @bind-Value="@TaskObject.Keterangan" />
                        <ValidationMessage For="@(() => TaskObject.Keterangan)" />
                    </div>
                    <div class="form-group">
                        <label for="nim">Upload Logo</label>
                        @if (!string.IsNullOrEmpty(FileUrl))
                        {
                            <img src="@FileUrl" alt="produk" width="250" />
                        }
                        <InputFile OnChange="HandleFileSelected" />
                        <div class="alert alert-warning">pilih gambar dan tunggu sampai gambar muncul</div>
                    </div>

                    
                    <button type="submit" class="btn btn-primary">Simpan</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
                
            </div>
        </div>
    </div>
</div>

@code {
    public string FileUrl { get; set; }
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public Store TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }
    SedekahKita.Web.Data.StoreService service;
    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new StoreService();
    }
    private async void HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(FileUrl))
            TaskObject.PhotoUrl = FileUrl;
        if (TaskObject.Id == 0)
        {
            //TaskObject.Id = service.GetLastId();
            service.InsertData(TaskObject);
        }
        else
        {
            service.UpdateData(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
             var bytes = ImageHelper.FixedSize(ms, 300, 300, false);
            string newName = $"{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
            await AzureBlobHelper.UploadFile(newName, bytes);
            FileUrl = $"https://storagemurahaje.blob.core.windows.net/toko-online/{newName}";
        }
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }


}