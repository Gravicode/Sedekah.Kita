@page "/master/penerima-bantuan"

@inject IJSRuntime jsRuntime
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@using SedekahKita.Web.Services
@using SedekahKita.Web.Helpers
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@namespace SedekahKita.Web.Pages.Master
<h1>Daftar Penerima Bantuan</h1>

<p>Gunakan halaman ini untuk mendaftarkan penerima bantuan.</p>

@if (DataPenerimaBantuan == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
        <table id="gridData" name="gridData" class="table table-striped">
            <thead>
                <tr>
                    <th>Nama</th>
                    <th>Keterangan</th>
                    <th>Alamat</th>
                    <th>Jml Jiwa</th>
                    <th>Kategori</th>
                    <th>Kondisi</th>
                    <th>Foto</th>
                    <th>Actions</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var item in DataPenerimaBantuan)
                {
                    if (item.Aktif)
                    {
                        <tr>
                            <td>@item.Nama</td>
                            <td>@item.Keterangan</td>
                            <td>@item.Alamat</td>
                            <td>@item.JumlahJiwa jiwa</td>
                            <td>@item.Kategori.ToString()</td>
                            <td>@item.Kondisi (@(AppConstants.KondisiInDesc(item.Kondisi)))</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.PhotoUrl))
                                {
                                    <img src="@item.PhotoUrl" width="100" alt="foto" />
                                }
                                else
                                {
                                    <p>tidak ada foto</p>
                                }
                            </td>
                            <td>
                                @if (UserName.ToLower() == item.CreatedBy.ToLower())
                                {
                                <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                                }
                                else
                                {
                                    <p>-</p>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        </div>
    </body>
}

<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah Penerima Bantuan" @onclick="(() => InitializeitemObject())" />
</div>
<ConfirmDialog OnClick="@Delete" />
<PenerimaBantuanDetail TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</PenerimaBantuanDetail>

@code {

    PenerimaBantuanService service;
    string customHeader = string.Empty;
    List<PenerimaBantuan> DataPenerimaBantuan;
    PenerimaBantuan itemObject = new PenerimaBantuan();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new PenerimaBantuanService();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            // Perform an action only available to authenticated (signed-in) users.
            DataPenerimaBantuan = service.GetAllData();
        }


    }


    private void InitializeitemObject()
    {
        UserProfileService svc = new UserProfileService();
        itemObject = new PenerimaBantuan();

        var selItem = svc.GetItemByEmail(UserName);
        if (selItem != null)
        {
            itemObject.CreatedBy = UserName;
            itemObject.CreatedDate = DateHelper.GetLocalTimeNow();
            itemObject.Kondisi = 1;
            itemObject.JumlahJiwa = 1;


        }

        //itemObject.Id = -1;

        customHeader = "Daftar Penerima Bantuan";
    }
    private async void DataChanged()
    {
        DataPenerimaBantuan = service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(PenerimaBantuan item)
    {
        customHeader = "Ubah Penerima Bantuan";
        itemObject = item;
    }
    private void PrepareForDelete(PenerimaBantuan item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        //var task = service.DeleteData(itemObject.Id);
        itemObject.Aktif = false;
        service.UpdateData(itemObject);
            
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataPenerimaBantuan = service.GetAllData();
        itemObject = new PenerimaBantuan() { Id = -1 };
    }
    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {

        if (DataPenerimaBantuan != null && DataPenerimaBantuan.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
    }
    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }
}
