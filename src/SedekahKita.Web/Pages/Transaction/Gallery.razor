@namespace SedekahKita.Web.Pages.Transaction
@page "/transaction/gallery"
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@inject IJSRuntime jsRuntime
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@using System.IO
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage
    <div class="container">

        <div class="row">

            <div class="col-lg-3">

                <h1 class="my-4">Toko Online Jamaah</h1>
                <div>
                    <div class="form-group">

                        <input type="text" @bind="Keyword" @onkeyup="@KeyUp" class="form-control" id="searchkey" placeholder="Ketik kata kunci">
                    </div>
                    <button @onclick="@(()=>Search(Keyword))" class="btn btn-primary mb-2">Cari</button>

                </div>
                @if (AppConstants.KategoriBarang != null)
                {
            <div class="list-group">
                <a style="cursor:pointer" @onclick="@(() => Search(Keyword, "Semua"))" @onclick:preventDefault class="list-group-item">Semua</a>
                @foreach (var cat in AppConstants.KategoriBarang)
                {
                    <a style="cursor:pointer" @onclick="@(() => Search(Keyword, cat.Key))" @onclick:preventDefault class="list-group-item">@cat.Value</a>
                }
            </div>
                }
                <div>
                    <button @onclick="BukaCart" class="btn btn-success mt-2">Keranjang Belanja</button>
                </div>

            </div>
            <!-- /.col-lg-3 -->

            <div class="col-lg-9">



                <div class="row">
                    @if (DataProduct != null)
                    {
                        foreach (var item in DataProduct)
                        {
                            <div class="col-lg-4 col-md-6 mb-4">
                                <div class="card h-100">
                                    @{ var img = GetPhotoProductById(item.Id);
                                        if (!string.IsNullOrEmpty(img))
                                        {
                                            <a><img class="card-img-top" src="@img" alt="produk"></a>
                                        }
                                    }

                                    <div class="card-body">
                                        <h4 class="card-title">
                                            <a>@item.Nama</a>
                                        </h4>
                                        <h5>Rp. @item.Harga.ToString("n2")</h5>
                                        <p class="card-text">@item.Keterangan</p>
                                    </div>
                                    <div class="card-footer">
                                        <button data-toggle="modal" data-target="#taskModal" class="btn btn-success" @onclick="(() => Beli(item))">
                                            Beli
                                        </button>

                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                <!-- /.row -->

            </div>
            <!-- /.col-lg-9 -->

        </div>
        <!-- /.row -->
        @if (MoreThan100)
        {
            <div class="row">
                <div class="col-12 text-left">
                    <button class="btn btn-primary mt-2" @onclick="@(()=>Search(Keyword,"Semua",true,ItemLimit))">Lihat semua produk</button>
                </div>
            </div>
        }
        

    </div>

<AddOrder TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</AddOrder>

@code {
    const int ItemLimit = 100;
    public CartTemp MyCart { get; set; }
    public string Keyword { get; set; }
    SedekahKita.Web.Data.ProductService service;
    string customHeader = string.Empty;
    List<Product> DataProduct;
    OrderDetail itemObject = new OrderDetail();
    StoreService storeService;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    string NamaToko = "";
    List<ProductPhoto> AllImages;
    SedekahKita.Web.Data.ProductPhotoService fotoProductService;
    Store store;
    public bool MoreThan100 { get; set; }
    void KeyUp(KeyboardEventArgs  e)
    {
        if (e.Key == "Enter")
        {
            Search(Keyword, "Semua");
        }
    }
    private async void DataChanged(bool CloseTransaction)
    {
        if (itemObject.Qty < 0)
        {
            itemObject.Qty = 0;
            itemObject.TotalHarga = 0;
        }
        if (MyCart.Detail.ContainsKey(itemObject.ProductId))
        {
            MyCart.Detail[itemObject.ProductId].Qty = itemObject.Qty;
            MyCart.Detail[itemObject.ProductId].TotalHarga = itemObject.TotalHarga;
        }
        else
        {
            MyCart.Detail.Add(itemObject.ProductId, itemObject);
        }
        if (CloseTransaction)
        {
            var realChart = ConvertChart();
            await sessionStorage.SetItemAsync("cart", realChart);
            NavMgr.NavigateTo("/transaction/cart");
        }
        else
            StateHasChanged();
    }

    async Task BukaCart()
    {
        var realChart = ConvertChart();
        await sessionStorage.SetItemAsync("cart", realChart);
        NavMgr.NavigateTo("/transaction/cart");
    }
    Cart ConvertChart()
    {
        var item = new Cart();
        item.Header = MyCart.Header;
        item.Detail = new List<OrderDetail>();
        foreach (var x in MyCart.Detail)
        {
            item.Detail.Add(x.Value);
        }
        return item;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (MyCart == null)
            {
                try
                {
                    var temp = await sessionStorage.GetItemAsync<Cart>("cart");
                    MyCart = new CartTemp() { Header = new Order(), Detail = new Dictionary<long, OrderDetail>() };
                    if (temp != null)
                    {
                        MyCart.Header = temp.Header;
                        foreach (var item in temp.Detail)
                        {
                            MyCart.Detail.Add(item.ProductId, item);
                        }

                    }
                }
                catch
                {
                    MyCart = new CartTemp() { Header = new Order(), Detail = new Dictionary<long, OrderDetail>() };
                }
            }
        }
    }

    void Search(string Keyword, string Category = "Semua", bool ShowAll = false, int Limit = ItemLimit)
    {
        DataProduct = service.FindByKeywordAndCategory(Keyword.ToLower(), Category, ShowAll, Limit);
        if (DataProduct.Count == ItemLimit)
            MoreThan100 = true;
        else
            MoreThan100 = false;

    }
    public string GetPhotoProductById(long ProductId)
    {
        if (AllImages != null)
        {
            var selImage = AllImages.Where(x => x.ProductId == ProductId).FirstOrDefault();
            if (selImage != null)
            {
                return selImage.PhotoUrl;
            }
        }
        return null;
    }

    async Task Beli(Product selItem)
    {
        itemObject = new OrderDetail()
        {
            ProductId = selItem.Id,
            Aktif = true,
            Harga = selItem.Harga,
            Kategori = selItem.Kategori,
            Keterangan = selItem.Keterangan,
            KodePromo = selItem.KodePromo,
            Nama = selItem.Nama,
            PotonganHarga = selItem.PotonganHarga,
            Satuan = selItem.Satuan,
            TokoId = selItem.TokoId,
            TotalPotonganHarga = selItem.PotonganHarga
        };
        if (MyCart.Detail.ContainsKey(itemObject.ProductId))
        {
            itemObject.Qty = MyCart.Detail[itemObject.ProductId].Qty;
            itemObject.TotalHarga = MyCart.Detail[itemObject.ProductId].TotalHarga;
        }
        else
        {
            itemObject.Qty = 1;
            itemObject.TotalHarga = itemObject.Qty * itemObject.Harga;
        }


        customHeader = "Beli Produk";
    }
    protected override async Task OnInitializedAsync()
    {
        Keyword = "";
        if (service == null) service = new ProductService();
        if (storeService == null) storeService = new StoreService();
        if (fotoProductService == null) fotoProductService = new ProductPhotoService();
        AllImages = fotoProductService.GetAllData();
        Search("");
    }
}
