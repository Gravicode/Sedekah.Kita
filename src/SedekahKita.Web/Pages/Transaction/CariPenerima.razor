@page "/transaction/cari-penerima"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inject IJSRuntime jsRuntime
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@using SedekahKita.Web.Services
@using SedekahKita.Web.Helpers
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@namespace SedekahKita.Web.Pages.Master
@inject IToastService toastService

<div class="page-content clean">
    <h2>KIRIM BANTUAN</h2>
    <div class="form">
        <div class="note">Gunakan halaman ini untuk mencari penerima bantuan.</div>
        <div class="form-group">
            <input type="text" class="textbox" name="filter" @onkeyup="@KeyUp" @bind="Keyword" placeholder="kata kunci pencarian">
        </div>
         <div class="form-group">
           <div class="checkbox">
                <label><input @bind="@IsGeofence" type="checkbox">  Set Geofence</label>
            </div>
        </div>
        <div class="form-button inline">
            
            <button class="primary" @onclick="SetArea">TERAPKAN GEOFENCE</button>
            <button class="secondary" @onclick="ClearArea">HAPUS GEOFENCE</button>
            <button class="" @onclick="RefreshData">CARI</button>
        </div>
        <div class="form-group">
            <GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="600" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>

        </div>
    </div>





    @if (DataPenerimaBantuan == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (DataPenerimaBantuan.Count <= 0)
    {
        <p><em>Belum ada data penerima bantuan</em></p>
    }
    else
    {
        <body onbeforeunload="TestDataTablesRemove('#gridData')">

            <div class="table-block">
                <div class="table-header">
                    <div class="table-title">Daftar Penerima Bantuan</div>
                </div>
                <div class="table-content table-responsive">
                    <table id="gridData" class="">
                        <thead>
                            <tr role="row">
                                <th class="sorting_asc">Nama</th>
                                <th class="sorting_desc">Alamat</th>
                                <th class="sorting">Jml Jiwa</th>
                                <th class="sorting">Kategori</th>
                                <th class="sorting">Kebutuhan</th>
                                <th class="sorting">Kondisi</th>
                                <th class="sorting">Jarak</th>
                                <th class="sorting">Tindakan</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in DataPenerimaBantuan)
                            {
                                if (item.Aktif)
                                {
                                    <tr>
                                        <td>@item.Nama</td>
                                        <td>@item.Alamat</td>
                                        <td>@item.JumlahJiwa jiwa</td>
                                        <td>@item.Kategori.ToString()</td>
                                        <td>@(AppConstants.JenisKebutuhan[item.Kebutuhan.ToString()])</td>
                                        <td>@item.Kondisi (@(AppConstants.KondisiInDesc(item.Kondisi)))</td>
                                        <td>
                                            @item.Distance km
                                        </td>
                                        <td>
                                            <div class="form-button inline">
                                                <a href="" @onclick="(() => GetDirections2(currentLocation,new GeoLocation() { Latitude = item.Latitude, Longitude = item.Longitude } ))" @onclick:preventDefault class="icon-link"><img src="assets/img/icon/route.png"></a>
                                                <a href="" @onclick:preventDefault @onclick="(() => PrepareForView(item))" data-toggle="modal" data-target="#modalBantuan" class="icon-link"><img src="assets/img/icon/package.png"></a>
                                                <a href="" @onclick:preventDefault @onclick="(() => PrepareForViewLaporan(item))" data-toggle="modal" data-target="#modalLaporanPalsu" class="icon-link"><img src="assets/img/icon/trash.png"></a>
                                            </div>
                                            @*<input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                                <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />*@

                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
                <div class="table-footer"></div>
            </div>


        </body>
    }
</div>
<DaftarBantuan @ref="db" TaskObject=@itemObject>
    <CustomHeader>Daftar Bantuan</CustomHeader>
</DaftarBantuan>

<DaftarLaporanPalsu @ref="dlp" TaskObject=@itemObject>
    <CustomHeader>Daftar Laporan Palsu</CustomHeader>
</DaftarLaporanPalsu>

@code {
    DaftarBantuan db;
    DaftarLaporanPalsu dlp;

    int CounterDot = 0;
    Polyline poly;
    Polygon SelectedArea;
    List<LatLngLiteral> pathList;
    List<LatLngLiteral> AreaObservation;
    List<Marker> MapMarkers;
    InfoWindow infoWindow;
    Marker MyLocation;
    public string Keyword { get; set; }
    public bool IsGeofence { get; set; }
    PenerimaBantuanService service;
    string customHeader = string.Empty;
    List<PenerimaBantuanExt> DataPenerimaBantuan;
    PenerimaBantuan itemObject;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    #region update location
    GeoLocation currentLocation;
    private static Action<GeoLocation> _action;

    protected override void OnInitialized()
    {
        _action = UpdateLocation;
        //map
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = -6.595038,
                Lng = 106.816635
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    async Task GetMyLocation()
    {
        await jsRuntime.InvokeVoidAsync("getLocation");
    }

    private void UpdateLocation(GeoLocation newLocation)
    {
        currentLocation = newLocation;

        StateHasChanged();
    }

    [JSInvokable]
    public static void UpdateLocationCaller(double lat, double lon)
    {
        _action.Invoke(new GeoLocation() { Latitude = lat, Longitude = lon });
    }
    #endregion

    #region maps
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;


    private async Task OnAfterInitAsync()
    {
        poly = await Polyline.CreateAsync(jsRuntime);
        await poly.SetMap(map1.InteropObject);
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });
        infoWindow = await InfoWindow.CreateAsync(jsRuntime);
        if (DataPenerimaBantuan == null)
        {
            await RefreshData();
        }
        await map1.InteropObject.AddListener<PolyMouseEvent>("click", async (x) =>
        {
            if (IsGeofence)
            {
                await addLatLng(x);
            }
        });
    }
    private async Task GetDirections2(GeoLocation loc1, GeoLocation loc2)
    {


        if (loc1 != null && loc2 != null)
        {
            //Direction Request
            DirectionsRequest dr = new DirectionsRequest();
            dr.Origin = new LatLngLiteral() { Lat = loc1.Latitude, Lng = loc1.Longitude };
            dr.Destination = new LatLngLiteral() { Lat = loc2.Latitude, Lng = loc2.Longitude };
            //dr.Waypoints = waypoints;
            dr.TravelMode = TravelMode.Driving;

            //Calculate Route
            var directionsResult = await dirRend.Route(dr);

            if (directionsResult != null)
            {
                foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
                {
                    _durationTotalString += route.Duration.Text;
                    _distanceTotalString += route.Distance.Text;
                }
                toastService.ShowInfo($"Durasi total: {_durationTotalString}, Jarak: {_distanceTotalString}");
            }
            else
            {
                toastService.ShowError("Rute tidak ditemukan", "Perhatian");
            }
        }

    }
    private async Task GetDirections(string FromAddress, string ToAddress)
    {

        var FromPos = GeoHelpers.GetLocationFromAddress(FromAddress);
        var ToPos = GeoHelpers.GetLocationFromAddress(ToAddress);
        if (FromPos.lat != 0 && ToPos.lat != 0)
        {
            //Direction Request
            DirectionsRequest dr = new DirectionsRequest();
            dr.Origin = new LatLngLiteral() { Lat = FromPos.lat, Lng = FromPos.lon };
            dr.Destination = new LatLngLiteral() { Lat = ToPos.lat, Lng = ToPos.lon };
            //dr.Waypoints = waypoints;
            dr.TravelMode = TravelMode.Driving;

            //Calculate Route
            var directionsResult = await dirRend.Route(dr);

            if (directionsResult != null)
            {
                foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
                {
                    _durationTotalString += route.Duration.Text;
                    _distanceTotalString += route.Distance.Text;
                }
            }
            else
            {
                toastService.ShowError("Rute tidak ditemukan", "Perhatian");
            }
        }

    }
    #endregion

    private void PrepareForView(PenerimaBantuan item)
    {
        itemObject = item;
        db.TaskObject = item;
        db.ReloadData();
    }
    private void PrepareForViewLaporan(PenerimaBantuan item)
    {
        itemObject = item;
        dlp.TaskObject = item;
        dlp.ReloadData();
    }
    async void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await RefreshData();
        }
    }
    async Task SetArea()
    {
        if (pathList != null && pathList.Count > 2)
        {
            if (AreaObservation == null)
                AreaObservation = new List<LatLngLiteral>();
            else AreaObservation.Clear();
            foreach (var item in pathList)
            {
                AreaObservation.Add(item);
            }
            var newPathList = new List<LatLngLiteral>(pathList);
            newPathList.Add(pathList[0]);
            await poly.SetPath(newPathList);

            if (SelectedArea == null)
            {
                SelectedArea = await Polygon.CreateAsync(jsRuntime);
                await SelectedArea.SetMap(map1.InteropObject);
                await SelectedArea.SetOptions(new PolygonOptions() { StrokeColor = "#2ECC71", StrokeOpacity = 0.8f, StrokeWeight = 3, FillColor = "#EAFAF1", FillOpacity = 0.3f });
            }

            await SelectedArea.SetPath(newPathList);
            await RefreshData();

            Console.WriteLine("area has been set.");
        }

    }
    async Task ClearArea()
    {
        if (pathList != null)
        {
            pathList.Clear();
            await poly.SetPath(pathList);
        }
        if (SelectedArea != null)
        {
            await SelectedArea.SetMap(null);
            SelectedArea = null;
        }
        if (AreaObservation != null)
        {
            AreaObservation.Clear();
            AreaObservation = null;
            await RefreshData();
        }

    }

    async Task addLatLng(PolyMouseEvent e)
    {
        CounterDot++;
        if (pathList == null)
            pathList = new List<LatLngLiteral>();
        if (AreaObservation != null)
        {
            AreaObservation = null;
            pathList.Clear();
            if (SelectedArea != null)
            {
                await SelectedArea.SetMap(null);
                SelectedArea = null;
            }
        }

        pathList.Add(e.LatLng);

        // Because path is an MVCArray, we can simply append a new coordinate
        // and it will automatically appear.
        await poly.SetPath(pathList);

    }

    async Task RefreshData()
    {
        if (map1 != null)
        {
            var all = service.GetAllDataByLocation(Keyword, currentLocation);
            var filtered = (IsGeofence && AreaObservation != null ? all.Where(x => Helpers.GeoHelpers.IsPointInPolygon(new LatLngLiteral() { Lat = x.Latitude, Lng = x.Longitude }, AreaObservation)).ToList() : all);
            DataPenerimaBantuan = filtered;
            if (MapMarkers != null)
            {
                foreach (var mark in MapMarkers)
                {
                    await mark.SetMap(null);
                }
                MapMarkers.Clear();
            }
            else
            {
                MapMarkers = new List<Marker>();
            }

            await UpdateCurrentLocation();

            foreach (var item in DataPenerimaBantuan)
            {
                var marker = await Marker.CreateAsync(jsRuntime);
                await marker.SetPosition(new LatLngLiteral() { Lat = item.Latitude, Lng = item.Longitude });
                await marker.SetMap(map1.InteropObject);
                await marker.AddListener<MouseEvent>("click", async (x) => await showInfo(x, item.Id));
                MapMarkers.Add(marker);
            }
            StateHasChanged();
        }

    }

    async Task UpdateCurrentLocation()
    {
        if (MyLocation == null && currentLocation != null)
        {
            var marker = await Marker.CreateAsync(jsRuntime);
            await marker.SetPosition(new LatLngLiteral() { Lat = currentLocation.Latitude, Lng = currentLocation.Longitude });
            await marker.SetMap(map1.InteropObject);
            await marker.AddListener<MouseEvent>("click", async (x) => await showMyInfo(x));
            MyLocation = marker;
        }
        else if (MyLocation != null)
        {
            var myloc = await MyLocation.GetPosition();
            if (myloc.Lat != currentLocation.Latitude && myloc.Lng != currentLocation.Longitude)
            {
                await MyLocation.SetPosition(new LatLngLiteral() { Lat = currentLocation.Latitude, Lng = currentLocation.Longitude });
            }
        }
    }

    async Task showMyInfo(MouseEvent e)
    {
        var title = $"This is my location<br/>";
        title += $"Address: {GeoHelpers.GetAddressFromLatLon(currentLocation)}<br/>";

        var contentString = $"{title}";
        await infoWindow.SetContent(contentString);
        await infoWindow.SetPosition(e.LatLng);
        await infoWindow.Open(map1.InteropObject);
    }
    async Task showInfo(MouseEvent e, long No)
    {

        var item = DataPenerimaBantuan.Where(x => x.Id == No).FirstOrDefault();
        var title = $"Nama : {item.Nama}<br/>";
        title += $"Keterangan : {item.Keterangan}<br/>";
        title += $"Alamat: {item.Alamat}<br/>";
        title += $"Jumlah Jiwa: {item.JumlahJiwa.ToString("N0")} orang<br/>";
        title += $"Kebutuhan: {AppConstants.JenisKebutuhan[item.Kebutuhan.ToString()]} cases<br/>";
        title += $"Kondisi: {item.Kondisi}<br/>";
        title += $"Tanggal Update: {item.CreatedDate.ToShortDateString()}<br/>";

        var contentString = $"{title}";
        await infoWindow.SetContent(contentString);
        await infoWindow.SetPosition(e.LatLng);
        await infoWindow.Open(map1.InteropObject);
    }
    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new PenerimaBantuanService();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            // Perform an action only available to authenticated (signed-in) users.

        }


    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {

        if (DataPenerimaBantuan != null && DataPenerimaBantuan.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {

            //get user location
            await GetMyLocation();

        }
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }
}
