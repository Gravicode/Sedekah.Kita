@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@inject IJSRuntime jsRuntime
@namespace SedekahKita.Web.Pages.Master
@using SedekahKita.Web.Helpers
@using SedekahKita.Web.Services
@using System.IO
@inject IToastService toastService


<div class="modal" tabindex="-1" role="dialog" id="modalDetailLaporanPalsu">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="ex3" style="height:400px;">
                    <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary></ValidationSummary>
                        <div class="form-group">
                            <label for="tgl">Tanggal</label>
                            <input type="hidden" @bind-value="@TaskObject.Id" />
                            <InputDate id="tgl" class="form-control" @bind-Value="@TaskObject.Tanggal" />
                            <ValidationMessage For="@(() => TaskObject.Tanggal)" />
                        </div>
                        <div class="form-group">
                            <label for="ket">Keterangan</label>
                            <InputTextArea id="ket" class="form-control" @bind-Value="@TaskObject.Keterangan" />
                            <ValidationMessage For="@(() => TaskObject.Keterangan)" />
                        </div>
                        <div class="form-group">
                            <label for="nim">Upload Foto Bukti</label>
                            @if (!string.IsNullOrEmpty(FileUrl))
                            {
                                <img src="@FileUrl" alt="produk" width="250" />
                            }
                            <InputFile OnChange="HandleFileSelected" />
                            <div class="alert alert-warning">pilih gambar dan tunggu sampai gambar muncul</div>
                        </div>


                        <button type="submit" class="btn btn-primary">Simpan</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    public string FileUrl { get; set; }
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public LaporanPalsu TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }
    LaporanPalsuService service;
    public PenerimaBantuan parent { set; get; }


    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new LaporanPalsuService();
    }

    private async void HandleValidSubmit()
    {

        if (!string.IsNullOrEmpty(FileUrl))
            TaskObject.FotoBuktiUrl = FileUrl;
        if (TaskObject.Id == 0)
        {


            service.InsertData(TaskObject);
            TaskObject.PenerimaBantuan = parent;
            service.UpdateData(TaskObject);
            var total = service.TotalReportByPenerima(parent);
            if (total >= AppConstants.MaxReport)
            {
                //disable penerima setelah laporan > threshold
                parent.Aktif = false;
                PenerimaBantuanService svc = new PenerimaBantuanService();
                svc.UpdateData(parent);
                toastService.ShowInfo($"Penerima bantuan dengan nama {parent.Nama} telah di non-aktifkan");
            }
            else
            {
                toastService.ShowInfo($"Terima kasih atas laporan Anda.");
            }
        }
        else
        {
            service.UpdateData(TaskObject);
        }

        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar

            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            var bytes = ImageHelper.FixedSize(ms, 640, 480, false);
            string newName = $"LaporanPalsu_{DateTime.Now.ToString("dd_MM_yyyy")}_{TaskObject.Id}{Path.GetExtension(file.Name)}";
            await AzureBlobHelper.UploadFile(newName, bytes);
            FileUrl = $"https://storagemurahaje.blob.core.windows.net/sedekah-kita/{newName}";
        }
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "modalDetailLaporanPalsu");
    }


}