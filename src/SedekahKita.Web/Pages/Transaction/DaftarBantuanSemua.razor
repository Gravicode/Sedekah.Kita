@page "/transaction/daftar-bantuan"
@inject IJSRuntime jsRuntime
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@using SedekahKita.Web.Services
@using SedekahKita.Web.Helpers
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@namespace SedekahKita.Web.Pages.Master

@if (DataBantuan == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <table id="gridData" name="gridData" class="table">
            <thead>
                <tr>
                    <th>Penerima</th>
                    <th>Alamat</th>
                    <th>Keterangan</th>
                    <th>Jumlah</th>
                    <th>Status</th>
                    <th>Pengirim</th>
                    <th>Foto</th>
                    <th>Actions</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var item in DataBantuan)
                {

                    <tr>
                        <td>@(item.PenerimaBantuan==null ? "-" : item.PenerimaBantuan.Nama)</td>
                        <td>@(item.PenerimaBantuan==null ? "-" : item.PenerimaBantuan.Alamat)</td>
                        <td>@item.Keterangan</td>
                        <td>@item.Jumlah @item.Satuan</td>
                        <td>@item.Status.ToString()</td>
                        <td>@item.Pengirim</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.PhotoUrl))
                            {
                                <img src="@item.PhotoUrl" width="100" alt="foto" />
                            }
                            else
                            {
                                <p>tidak ada foto</p>
                            }
                        </td>
                        <td>
                            @if (UserName == item.Owner)
                            {
                                <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#modalDetailBantuan" value="Ubah" />
                                <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    </body>

}
<ConfirmDialog OnClick="@Delete" />

<BantuanDetail @ref="bd" TaskObject=@itemObject DataChanged="@DataChangedBantuan">
    <CustomHeader>@customHeader</CustomHeader>
</BantuanDetail>

@code {

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }
    BantuanDetail bd;
    BantuanService service;
    string customHeader = string.Empty;
    List<Bantuan> DataBantuan;
    Bantuan itemObject = new Bantuan();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    private async void CloseWindow()
    {
        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "modalBantuan");
    }

    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new BantuanService();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            // Perform an action only available to authenticated (signed-in) users.
            ReloadData();
        }
    }

    public void ReloadData()
    {
        DataBantuan = service.GetAllData();
        StateHasChanged();
    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {

        if (DataBantuan != null && DataBantuan.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
    }
    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

    private async void DataChangedBantuan()
    {
        ReloadData();

    }

    private void PrepareForEdit(Bantuan item)
    {
        customHeader = "Ubah Bantuan";
        itemObject = item;
    }
    private void PrepareForDelete(Bantuan item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        ReloadData();
        itemObject = new Bantuan() { Id = -1 };
    }
}
