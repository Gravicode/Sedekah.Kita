@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@inject IJSRuntime jsRuntime
@namespace SedekahKita.Web.Pages.Transaction
@using System.IO
<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <div>

                    <div class="form-group">
                        Produk: <b>@TaskObject.Nama</b>
                    </div>
                    <div class="form-group">
                        Keterangan: <p>@TaskObject.Keterangan</p>
                    </div>
                    <div class="form-group">
                        Harga: Rp. @TaskObject.Harga.ToString("n2") / @TaskObject.Satuan
                    </div>
                    <div class="form-group">
                        <label for="qty">Qty</label>
                        <input type="number" min="1" max="99999" id="qty" @bind="@TaskObject.Qty" class="form-control" />
                    </div>
                    <div class="form-group">
                        Total Harga: Rp. @(TaskObject.Qty * TaskObject.Harga)
                    </div>


                    <button @onclick="@(()=>AddToCart(false))" class="btn btn-primary">Tambah dan Lanjut Belanja</button>
                    <button @onclick="@(()=>AddToCart(true))" class="btn btn-success">Tambah dan Bayar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>

            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public OrderDetail TaskObject { get; set; }
    [Parameter]
    public Action<bool> DataChanged { get; set; }
    SedekahKita.Web.Data.OrderDetailService service;

    void  Kalkulasi(ChangeEventArgs e)
    {
        int.TryParse(e.Value.ToString(), out int newVal);
        TaskObject.Qty = newVal;
        TaskObject.TotalHarga = TaskObject.Qty * TaskObject.Harga;
    }
    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new OrderDetailService();
    }

    private async void AddToCart(bool CloseTransaction=false)
    {
        TaskObject.TotalHarga = TaskObject.Qty * TaskObject.Harga;
        await CloseTaskModal();
        DataChanged?.Invoke(CloseTransaction);
    }
    



    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }


}