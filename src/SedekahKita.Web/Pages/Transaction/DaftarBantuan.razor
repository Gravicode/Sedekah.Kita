@inject IJSRuntime jsRuntime
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@using SedekahKita.Web.Services
@using SedekahKita.Web.Helpers
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@namespace SedekahKita.Web.Pages.Master

<div class="modal" tabindex="-1" role="dialog" id="modalBantuan">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>


                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="flex">
                    <h2><img src="assets/img/icon/package.png" width="30"></h2>
                    <div class="form-button inline">
                        <button class="plain primary" data-toggle="modal" data-target="#modalDetailBantuan" @onclick="(() => InitializeitemObject())"><i class="bi bi-plus-circle"></i> <span>Tambah</span></button>
                        <button class="plain " data-dismiss="modal"><span>Batal</span></button>
                    </div>
                </div>
                <div class="table-responsive">
                    <div class="table-block">
                        <div class="table-content">
                            @if (DataBantuan == null)
                            {
                                <p><em>Loading...</em></p>
                            }
                            else
                            {
                                <table class="">
                                    <thead>
                                        <tr role="row">
                                            <th class="sorting_asc">Penerima</th>
                                            <th class="sorting_desc">Alamat</th>
                                            <th class="sorting">Keterangan</th>
                                            <th class="sorting">Jumlah</th>
                                            <th class="sorting">Status</th>
                                            <th class="sorting">Pengirim</th>
                                            <th class="sorting">Foto</th>
                                            <th class="sorting">Tindakan</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in DataBantuan)
                                        {

                                            <tr>
                                                <td>@(item.PenerimaBantuan==null ? "-" : item.PenerimaBantuan.Nama)</td>
                                                <td>@(item.PenerimaBantuan==null ? "-" : item.PenerimaBantuan.Alamat)</td>
                                                <td>@item.Keterangan</td>
                                                <td>@item.Jumlah @item.Satuan</td>
                                                <td>@item.Status.ToString()</td>
                                                <td>@item.Pengirim</td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(item.PhotoUrl))
                                                    {
                                                        <img src="@item.PhotoUrl" width="100" alt="foto" />
                                                    }
                                                    else
                                                    {
                                                        <p>tidak ada foto</p>
                                                    }
                                                </td>
                                                <td>
                                                    @if (UserName.ToLower() == item.Owner.ToLower())
                                                    {
                                                        <a @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#modalDetailBantuan" @onclick:preventDefault="true" @onclick:stopPropagation="true" class="icon-link"><img src="assets/img/icon/edit.png"></a>
                                                        <a @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" @onclick:preventDefault="true" @onclick:stopPropagation="true" class="icon-link"><img src="assets/img/icon/trash.png"></a>
                                                    }
                                                    else
                                                    {
                                                        <p>-</p>
                                                    }
                                                </td>
                                            </tr>
                                        }

                                    </tbody>
                                </table>
                            }

                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>



<BantuanDetail @ref="bd" TaskObject=@itemObject DataChanged="@DataChangedBantuan">
    <CustomHeader>@customHeader</CustomHeader>
</BantuanDetail>
<ConfirmDialog OnClick="@Delete" />

@code {
    [Parameter]
    public RenderFragment CustomHeader { get; set; }
    [Parameter]
    public PenerimaBantuan TaskObject { get; set; }
    [Parameter]
    public Action DataChanged { get; set; }
    BantuanDetail bd;
    BantuanService service;
    string customHeader = string.Empty;
    List<Bantuan> DataBantuan;
    Bantuan itemObject = new Bantuan();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    private async void CloseWindow()
    {
        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "modalBantuan");
    }

    protected override async Task OnInitializedAsync()
    {
        if (service == null) service = new BantuanService();

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            // Perform an action only available to authenticated (signed-in) users.

        }
    }

    public void ReloadData()
    {
        if (TaskObject != null)
        {
            DataBantuan = service.GetDataByPenerima(TaskObject);
            StateHasChanged();
        }

    }

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {

        if (DataBantuan != null && DataBantuan.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
    }
    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

    private void InitializeitemObject()
    {
        UserProfileService svc = new UserProfileService();
        itemObject = new Bantuan();

        var selItem = svc.GetItemByEmail(UserName);
        if (selItem != null)
        {
            itemObject.Owner = UserName;
            itemObject.Pengirim = selItem.FullName;
            itemObject.HpPengirim = selItem.Phone;
            itemObject.AlamatPengirim = selItem.Alamat;
            itemObject.TanggalKirim = DateHelper.GetLocalTimeNow();
            bd.FileUrl = "";
            //itemObject.PenerimaBantuan = TaskObject;
            bd.parent = TaskObject;
        }

        //itemObject.Id = -1;

        customHeader = "Data Bantuan";
    }
    private async void DataChangedBantuan()
    {
        ReloadData();

    }

    private void PrepareForEdit(Bantuan item)
    {
        customHeader = "Ubah Bantuan";
        itemObject = item;
        bd.FileUrl = item.PhotoUrl;
    }
    private void PrepareForDelete(Bantuan item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        ReloadData();
        itemObject = new Bantuan() { Id = -1 };
    }
}
