@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@page "/transaction/map-route"
@page "/transaction/map-route/{DeliveryOrderId:long}"

@inject IToastService toastService
@inject IJSRuntime jsRuntime
@using SedekahKita.Web.Models
@using SedekahKita.Web.Data
@inject NavigationManager NavMgr
@using SedekahKita.Web.Pages.Common
@namespace SedekahKita.Web.Pages.Transaction
@using SedekahKita.Web.Helpers
@using SedekahKita.Tools
<h3>Rute Pengiriman Barang</h3>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="600" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>

<div class="alert alert-warning mt-2">
    @if (SelItem != null)
    {
        <p> 
            Dari: @SelItem.PemesanAlamat<br />
            Menuju: @SelItem.PenerimaAlamat <br />
            Durasi: @_durationTotalString <br />
            Jarak: @_distanceTotalString <br />
        </p>
    }
</div>
<button class="btn btn-primary" @onclick="Kembali">Kembali</button>

@code {
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    [Parameter]
    public long DeliveryOrderId { get; set; }
    public OrderDelivery SelItem { get; set; }
    OrderDeliveryService service;

    void Kembali()
    {
        NavMgr.NavigateTo("/transaction/delivery-order");
    }
    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = -6.595038,
                Lng = 106.816635
            },
            MapTypeId = MapTypeId.Roadmap
        };

    }

    async Task LoadData()
    {
        if (service == null) service = new OrderDeliveryService();
        if (DeliveryOrderId > -1)
        {
            SelItem = service.GetDataById(DeliveryOrderId);
            await GetDirections(SelItem.PemesanAlamat, SelItem.PenerimaAlamat);
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {

    }
    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });
        await  LoadData();
    }

    private async Task GetDirections(string FromAddress, string ToAddress)
    {
        //Adding a waypoint
        //var waypoints = new List<DirectionsWaypoint>();
        //waypoints.Add(new DirectionsWaypoint() { Location = "Bethlehem, PA", Stopover = true });
        var FromPos = GeoHelpers.GetLocationFromAddress(FromAddress);
        var ToPos = GeoHelpers.GetLocationFromAddress(ToAddress);
        if (FromPos.lat != 0 && ToPos.lat != 0)
        {
            //Direction Request
            DirectionsRequest dr = new DirectionsRequest();
            dr.Origin = new LatLngLiteral() { Lat = FromPos.lat, Lng = FromPos.lon };
            dr.Destination = new LatLngLiteral() { Lat = ToPos.lat, Lng = ToPos.lon };
            //dr.Waypoints = waypoints;
            dr.TravelMode = TravelMode.Driving;

            //Calculate Route
            var directionsResult = await dirRend.Route(dr);
            
            if (directionsResult != null)
            {
                foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
                {
                    _durationTotalString += route.Duration.Text;
                    _distanceTotalString += route.Distance.Text;
                }
            }
            else
            {
                toastService.ShowError("Rute tidak ditemukan", "Perhatian");
            }
        }

    }
}